// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250602113128_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.Data.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BoardId"));

                    b.Property<string>("BorderColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("BorderColors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CellColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<int>("Cols")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionDown")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DescriptionLeft")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LabelsRight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelsUp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Rows")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BoardId");

                    b.HasIndex("UserId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("backend.Data.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CardId"));

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("ENUM('Decision', 'Item')");

                    b.HasKey("CardId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("backend.Data.Decision", b =>
                {
                    b.Property<int>("DecisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DecisionId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<double>("DecisionBaseCost")
                        .HasColumnType("double");

                    b.Property<int>("DecisionCostWeight")
                        .HasColumnType("int");

                    b.Property<string>("DecisionLongDesc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DecisionShortDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.HasKey("DecisionId");

                    b.HasIndex("CardId");

                    b.HasIndex("DeckId");

                    b.ToTable("Decisions");
                });

            modelBuilder.Entity("backend.Data.DecisionEnabler", b =>
                {
                    b.Property<int>("DecisionEnablerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DecisionEnablerId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("EnablerId")
                        .HasColumnType("int");

                    b.HasKey("DecisionEnablerId");

                    b.HasIndex("CardId");

                    b.HasIndex("EnablerId");

                    b.ToTable("DecisionEnablers");
                });

            modelBuilder.Entity("backend.Data.DecisionWeight", b =>
                {
                    b.Property<int>("DecisionWeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DecisionWeightId"));

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("BoosterX")
                        .HasColumnType("int");

                    b.Property<int>("BoosterY")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("WeightX")
                        .HasColumnType("int");

                    b.Property<int>("WeightY")
                        .HasColumnType("int");

                    b.HasKey("DecisionWeightId");

                    b.HasIndex("BoardId");

                    b.HasIndex("CardId");

                    b.ToTable("DecisionWeights");
                });

            modelBuilder.Entity("backend.Data.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DeckId"));

                    b.Property<string>("DeckName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DeckId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("backend.Data.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FeedbackPDF")
                        .HasColumnType("LONGBLOB");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CardId");

                    b.HasIndex("DeckId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("backend.Data.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GameId"));

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<string>("GameDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GameLongDesc")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GameStatus")
                        .HasColumnType("ENUM('During', 'Paused', 'End')");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("BoardId");

                    b.HasIndex("DeckId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("backend.Data.GameBoard", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("GameProcessId")
                        .HasColumnType("int");

                    b.Property<int>("PozX")
                        .HasColumnType("int");

                    b.Property<int>("PozY")
                        .HasColumnType("int");

                    b.HasKey("GameId", "TeamId");

                    b.HasIndex("BoardId");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.HasIndex("GameProcessId");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("GameBoards");
                });

            modelBuilder.Entity("backend.Data.GameLog", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("GameId", "TeamId");

                    b.HasIndex("CardId");

                    b.HasIndex("DeckId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("TeamId");

                    b.ToTable("GameLogs");
                });

            modelBuilder.Entity("backend.Data.GameLogSpec", b =>
                {
                    b.Property<int>("GameLogSpecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GameLogSpecId"));

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("BoostX")
                        .HasColumnType("int");

                    b.Property<int>("BoostY")
                        .HasColumnType("int");

                    b.Property<int>("GameLogId")
                        .HasColumnType("int");

                    b.Property<int>("GameProcessId")
                        .HasColumnType("int");

                    b.Property<int>("MoveX")
                        .HasColumnType("int");

                    b.Property<int>("MoveY")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("GameLogSpecId");

                    b.HasIndex("BoardId");

                    b.HasIndex("GameProcessId");

                    b.HasIndex("TeamId");

                    b.HasIndex("GameLogId", "TeamId");

                    b.ToTable("GameLogSpecs");
                });

            modelBuilder.Entity("backend.Data.GameProcess", b =>
                {
                    b.Property<int>("GameProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GameProcessId"));

                    b.Property<string>("ProcessDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProcessLongDesc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GameProcessId");

                    b.ToTable("GameProcess");
                });

            modelBuilder.Entity("backend.Data.Item", b =>
                {
                    b.Property<int>("ItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ItemsId"));

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<string>("HardwareLongDesc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HardwareShortDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("ItemsBaseCost")
                        .HasColumnType("double");

                    b.Property<int>("ItemsCostWeight")
                        .HasColumnType("int");

                    b.HasKey("ItemsId");

                    b.HasIndex("CardId");

                    b.HasIndex("DeckId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("backend.Data.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("TeamBud")
                        .HasColumnType("int");

                    b.Property<string>("TeamColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TeamToken")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("TeamId");

                    b.HasIndex("GameId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("backend.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LicensesOwned")
                        .HasColumnType("int");

                    b.Property<int>("LicensesUsed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Data.Board", b =>
                {
                    b.HasOne("backend.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.Decision", b =>
                {
                    b.HasOne("backend.Data.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("backend.Data.DecisionEnabler", b =>
                {
                    b.HasOne("backend.Data.Card", "Card")
                        .WithMany("DecisionEnablers")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Card", "CardEnabler")
                        .WithMany("DecisionEnablerOfThis")
                        .HasForeignKey("EnablerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("CardEnabler");
                });

            modelBuilder.Entity("backend.Data.DecisionWeight", b =>
                {
                    b.HasOne("backend.Data.Board", "Board")
                        .WithOne()
                        .HasForeignKey("backend.Data.DecisionWeight", "BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("backend.Data.Deck", b =>
                {
                    b.HasOne("backend.Data.User", "User")
                        .WithOne()
                        .HasForeignKey("backend.Data.Deck", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.Feedback", b =>
                {
                    b.HasOne("backend.Data.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("backend.Data.Game", b =>
                {
                    b.HasOne("backend.Data.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.GameBoard", b =>
                {
                    b.HasOne("backend.Data.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Game", "Game")
                        .WithOne()
                        .HasForeignKey("backend.Data.GameBoard", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.GameProcess", "GameProcess")
                        .WithMany()
                        .HasForeignKey("GameProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Team", "Team")
                        .WithOne()
                        .HasForeignKey("backend.Data.GameBoard", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Game");

                    b.Navigation("GameProcess");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("backend.Data.GameLog", b =>
                {
                    b.HasOne("backend.Data.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Deck");

                    b.Navigation("Feedback");

                    b.Navigation("Game");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("backend.Data.GameLogSpec", b =>
                {
                    b.HasOne("backend.Data.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.GameProcess", "GameProcess")
                        .WithMany()
                        .HasForeignKey("GameProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.GameLog", "GameLog")
                        .WithMany()
                        .HasForeignKey("GameLogId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("GameLog");

                    b.Navigation("GameProcess");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("backend.Data.Item", b =>
                {
                    b.HasOne("backend.Data.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("backend.Data.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("backend.Data.Team", b =>
                {
                    b.HasOne("backend.Data.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("backend.Data.Card", b =>
                {
                    b.Navigation("DecisionEnablerOfThis");

                    b.Navigation("DecisionEnablers");
                });
#pragma warning restore 612, 618
        }
    }
}
